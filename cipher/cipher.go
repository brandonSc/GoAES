package cipher

import (
	//"fmt"
	"github.com/brandonSc/GoAES/utils"
)

const (
	Nb = 4  // number of columns (32 bit words) [FIPS-197]
	Nk = 4  // number of words comprising the cipher key [FIPS-197]
	Nr = 10 // number of rounds
)

//
// AES encrypt a block of data - FIPS-197, Section 5.1
// @param plaintext - the input data to encrypt
// @param key - key schedule as 2D byte-array
// @return the AES encrypted plaintext
//
func Cipher(input [4 * Nb]byte, word [Nb * (Nr + 1)][4]byte) [4 * Nb]byte {
	//Nr := (len(key) / (Nb - 1)) // number of rounds (10 for 128 bit)?? [FIPS-197]
	var state [4][Nb]byte

	// state = input
	for i := 0; i < 4*Nb; i++ {
		state[i%4][i/4] = input[i]
	}

	state = AddRoundKey(state, word[0:Nb])

	for rnd := 1; rnd < Nr; rnd++ {
		state = SubBytes(state)
		state = ShiftRows(state)
		state = MixColumns(state)
		state = AddRoundKey(state, word[rnd*Nb:((rnd+1)*Nb)])
	}

	state = SubBytes(state)
	state = ShiftRows(state)
	state = AddRoundKey(state, word[(Nr*Nb):((Nr+1)*Nb)])

	return input //state
}

//
// Break key into distinct key rounds.
// @param key the main 128-bit AES key
// @return a key schedule for rounds in AES
//
func KeyExpansion(key [4 * Nk]byte, word [Nb * (Nr + 1)][4]byte) [Nb * (Nr + 1)][4]byte {
	var temp [4]byte

	for i := 0; i < Nk; i++ {
		w := [4]byte{key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]}
		word[i] = w
	}

	for i := Nk; i < (Nb * (Nr + 1)); i++ {
		temp = word[i-1]
		if i%Nk == 0 {
			temp = utils.XorWord(SubWord(RotWord(temp)), RCon[i/Nk])
		} else if Nk > 6 && i%Nk == 4 {
			temp = SubWord(temp)
		}
		word[i] = utils.XorWord(word[i-Nk], temp)
	}
	return word
}

//
// XOR the state with the round key
// See section 5.1.4 of FIPS-197.
//
func AddRoundKey(state [4][Nb]byte, key [][4]byte) [4][Nb]byte {
	for c := 0; c < Nb; c++ {
		state[0][c] = state[0][c] ^ key[c][0]
		state[1][c] = state[1][c] ^ key[c][1]
		state[2][c] = state[2][c] ^ key[c][2]
		state[3][c] = state[3][c] ^ key[c][3]
	}
	return state
}

func RotWord(word [4]byte) [4]byte {
	var temp = word[0]
	for i := 0; i < 3; i++ {
		word[i] = word[i+1]
	}
	word[3] = temp
	return word
}

func SubWord(word [4]byte) [4]byte {
	for i := 0; i < 4; i++ {
		word[i] = SBox[word[i]]
	}
	return word
}

func SubBytes(state [4][Nb]byte) [4][Nb]byte {
	for r := 0; r < 4; r++ {
		for c := 0; c < Nb; c++ {
			state[r][c] = SBox[state[r][c]]
		}
	}
	return state
}

func ShiftRows(state [4][Nb]byte) [4][Nb]byte {
	var temp [4]byte
	for r := 1; r < 4; r++ {
		for c := 0; c < 4; c++ {
			temp[c] = state[r][(c+r)%Nb]
		}
		for c := 0; c < 4; c++ {
			state[r][c] = temp[c]
		}
	}
	return state
}

func MixColumns(state [4][Nb]byte) [4][Nb]byte {
	for c := 0; c < 4; c++ {
		var a [128]byte
		var b [128]byte
		for i := 0; i < 4; i++ {
			a[i] = state[i][c]
			// should further understand the significance of next line ..
			if (state[i][c] & 0x80) == 1 {
				b[i] = state[i][c] << (1 ^ 0x011b)
			} else {
				b[i] = state[i][c] << 1
			}
		}
		// FIPS-197 Section 4.3
		state[0][c] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3]
		state[1][c] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3]
		state[2][c] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3]
		state[3][c] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3]
	}
	return state
}

// Figure 7 In FIPS-197
var SBox = [256]byte{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}

var RCon = [11][4]byte{[4]byte{0x00, 0x00, 0x00, 0x00},
	[4]byte{0x01, 0x00, 0x00, 0x00},
	[4]byte{0x02, 0x00, 0x00, 0x00},
	[4]byte{0x04, 0x00, 0x00, 0x00},
	[4]byte{0x08, 0x00, 0x00, 0x00},
	[4]byte{0x10, 0x00, 0x00, 0x00},
	[4]byte{0x20, 0x00, 0x00, 0x00},
	[4]byte{0x40, 0x00, 0x00, 0x00},
	[4]byte{0x80, 0x00, 0x00, 0x00},
	[4]byte{0x1b, 0x00, 0x00, 0x00},
	[4]byte{0x36, 0x00, 0x00, 0x00}}
